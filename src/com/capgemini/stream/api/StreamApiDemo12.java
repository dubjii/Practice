package com.capgemini.stream.api;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class StreamApiDemo12 {

	public static void main(String[] args) {
		// flat map -> if we have complex data in our collection then we go for flatmap concept
		// like one collection containing multiple collection
		// in flatmap return multiple value(returns a stream of objects)
		// in map we return 1 value (single object)
		// map takes Function as parameter
		// with map()
		List<Integer> list1 = Arrays.asList(1,2,3,4,5,6);
		 List<Integer> list2 =list1.stream().map(n-> n+5).collect(Collectors.toList());
		System.out.println(list2);
		
		// flatmap
		List<Integer> list3 = Arrays.asList(1,2);
		List<Integer> list4 = Arrays.asList(3,4);
		List<Integer> list5 = Arrays.asList(5,6);
		List<List<Integer>> finalList= Arrays.asList(list3 ,list4,list5);
		// in flatmap i am passing list as argument and i am adding each list into another stream
		// flTMp will take function as argument
		List <Integer> finalResult =finalList.stream().flatMap(n-> n.stream()).collect(Collectors.toList());
		//flat map will take one collection argument add that into stream so will get stream of object
		System.out.println(finalResult);// op [1, 2, 3, 4, 5, 6]
		// i can use the map with stream if i want to perform certain operations
		// here i am applying map method for each stream generated by flatmap 
		List <Integer> finalResult1 =finalList.stream().flatMap(n-> n.stream()).map(n-> n+10).collect(Collectors.toList());
		System.out.println(finalResult1);// [11, 12, 13, 14, 15, 16]
	}

}
